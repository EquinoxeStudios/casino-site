import os
import json
import requests
from datetime import datetime
from pathlib import Path
import openai
from jinja2 import Template
from dotenv import load_dotenv
import re
import random
import time
from urllib.parse import urlparse
import traceback
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
from unique_generator import UniqueWebsiteGenerator

class CompleteWebsiteGenerator:
    def __init__(self, openai_api_key, default_domain="spikeup.com"):
        """Initialize the complete website generator with OpenAI API key and dynamic whitelisted domain"""
        self.client = openai.OpenAI(api_key=openai_api_key)
        self.output_dir = Path("generated_websites")
        self.output_dir.mkdir(exist_ok=True)
        
        # Create subdirectories
        self.images_dir = self.output_dir / "images" / "games"
        self.images_dir.mkdir(parents=True, exist_ok=True)
        
        self.pages_dir = self.output_dir / "pages"
        self.pages_dir.mkdir(exist_ok=True)
        
        self.games_dir = self.output_dir / "games"
        self.games_dir.mkdir(exist_ok=True)
        
        # Create assets directories
        self.css_dir = self.output_dir / "assets" / "css"
        self.css_dir.mkdir(parents=True, exist_ok=True)
        
        self.js_dir = self.output_dir / "assets" / "js"
        self.js_dir.mkdir(parents=True, exist_ok=True)
        
        # SlotsLaunch API configuration
        self.slotslaunch_token = "6neGxBm3O8L6Wy2ZbD0xykkFwtaDi653SH7RanMSLtEPDE1V5f"
        self.slotslaunch_base_url = "https://slotslaunch.com/api"
        self.default_domain = default_domain  # Whitelisted domain (dynamic)
        self.last_api_call = 0
        self.api_lock = threading.Lock()
        
        # Debug mode
        self.debug = True
        
        # Thread pool for concurrent downloads
        self.download_executor = ThreadPoolExecutor(max_workers=10)
        
        print(f"üîß Complete Website Generator Initialized")
        print(f"üìÅ Output directory: {self.output_dir}")
        print(f"üñºÔ∏è Images directory: {self.images_dir}")
        print(f"üìÑ Pages directory: {self.pages_dir}")
        print(f"üéÆ Games directory: {self.games_dir}")
        print(f"üé® CSS directory: {self.css_dir}")
        print(f"üìú JS directory: {self.js_dir}")
    
    def log_debug(self, message):
        """Enhanced logging for debugging"""
        if self.debug:
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"[{timestamp}] üîç DEBUG: {message}")
    
    def generate_base_css(self, colors, primary_font):
        """Generate base CSS file with all shared styles"""
        self.log_debug("Generating base.css...")
        
        css_content = f"""/* Base CSS - Generated by Complete Website Generator */
/* Generated on {datetime.now().strftime("%B %d, %Y at %H:%M")} */

* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

:root {{
    /* Dynamic Brand Colors */
    --primary-color: {colors['primary']};
    --secondary-color: {colors['secondary']};
    --accent-color: {colors['accent']};
    --background-start: {colors.get('background_start', '#0a0a0a')};
    --background-end: {colors.get('background_end', '#16213e')};
    --text-color: {colors.get('text_color', '#fff')};
    
    /* Dynamic Gradients */
    --primary-gradient: linear-gradient(45deg, {colors['primary']}, {colors['secondary']});
    --title-gradient: linear-gradient(45deg, #fff, {colors['primary']}, {colors['secondary']}, {colors['accent']});
    --hero-gradient: linear-gradient(45deg, {colors['primary']}, {colors['accent']});
    
    /* Hover States */
    --primary-hover: {colors.get('primary_hover', colors['primary'])};
    --secondary-hover: {colors.get('secondary_hover', colors['secondary'])};
    
    /* Component Colors */
    --sidebar-start: {colors.get('sidebar_start', '#1e1e2e')};
    --sidebar-end: {colors.get('sidebar_end', '#2a2a4a')};
    --footer-bg: {colors.get('footer_bg', '#1e293b')};
    --about-bg-start: {colors.get('about_bg_start', 'rgba(255, 107, 107, 0.05)')};
    --about-bg-end: {colors.get('about_bg_end', 'rgba(72, 219, 251, 0.05)')};
    
    /* Typography */
    --primary-font: '{primary_font}', -apple-system, BlinkMacSystemFont, sans-serif;
    
    /* Fluid Typography System */
    --font-xs: clamp(0.625rem, calc(0.5rem + 0.625vw), 0.875rem);
    --font-sm: clamp(0.75rem, calc(0.65rem + 0.5vw), 1rem);
    --font-base: clamp(0.875rem, calc(0.75rem + 0.625vw), 1.125rem);
    --font-lg: clamp(1rem, calc(0.85rem + 0.75vw), 1.25rem);
    --font-xl: clamp(1.125rem, calc(0.95rem + 0.875vw), 1.5rem);
    --font-2xl: clamp(1.25rem, calc(1rem + 1.25vw), 2rem);
    --font-3xl: clamp(1.5rem, calc(1.25rem + 1.25vw), 2.5rem);
    --font-4xl: clamp(2rem, calc(1.5rem + 2.5vw), 3.5rem);
    
    /* Fluid Spacing System */
    --space-3xs: clamp(0.25rem, calc(0.2rem + 0.25vw), 0.375rem);
    --space-2xs: clamp(0.375rem, calc(0.3rem + 0.375vw), 0.5rem);
    --space-xs: clamp(0.5rem, calc(0.4rem + 0.5vw), 0.75rem);
    --space-sm: clamp(0.75rem, calc(0.6rem + 0.75vw), 1rem);
    --space-md: clamp(1rem, calc(0.8rem + 1vw), 1.5rem);
    --space-lg: clamp(1.5rem, calc(1.2rem + 1.5vw), 2rem);
    --space-xl: clamp(2rem, calc(1.5rem + 2.5vw), 3rem);
    --space-2xl: clamp(3rem, calc(2rem + 3vw), 4rem);
    --space-3xl: clamp(4rem, calc(3rem + 3vw), 6rem);
    
    /* Layout System */
    --sidebar-width: clamp(200px, 20vw, 280px);
    --sidebar-collapsed: clamp(30px, 5vw, 40px);
    --container-padding: clamp(1rem, 2.5vw, 2rem);
    --container-max: min(95vw, 1400px);
    --content-max: min(90vw, 800px);
    
    /* Component Sizing */
    --card-width: clamp(180px, 22vw, 300px);
    --card-padding: clamp(1rem, 2vw, 1.5rem);
    --card-gap: clamp(0.75rem, 1.5vw, 1.5rem);
    --icon-size: clamp(40px, 8vw, 60px);
    --button-height: clamp(40px, 6vw, 48px);
    --nav-height: clamp(44px, 8vw, 56px);
    --touch-target: clamp(44px, 8vw, 56px);
    
    /* Border Radius */
    --border-radius-sm: clamp(4px, 1vw, 8px);
    --border-radius-md: clamp(8px, 2vw, 12px);
    --border-radius-lg: clamp(12px, 3vw, 16px);
    
    /* Shadows */
    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.15);
    --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.2);
    --shadow-xl: 0 16px 32px rgba(0, 0, 0, 0.25);
}}

/* Base Body Styles */
body {{
    font-family: var(--primary-font);
    line-height: 1.6;
    color: var(--text-color);
    background: linear-gradient(135deg, var(--background-start) 0%, var(--background-end) 100%);
    min-height: 100vh;
    overflow-x: hidden;
    font-size: var(--font-base);
}}

/* Sidebar Styles */
.sidebar {{
    position: fixed;
    left: 0;
    top: 0;
    width: var(--sidebar-width);
    height: 100vh;
    background: linear-gradient(180deg, var(--sidebar-start) 0%, var(--sidebar-end) 100%);
    backdrop-filter: blur(10px);
    border-right: 1px solid rgba(255, 255, 255, 0.1);
    z-index: 1000;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow-y: auto;
    transform: translateX(0);
}}

.sidebar.collapsed {{
    transform: translateX(calc(-1 * var(--sidebar-width) + var(--sidebar-collapsed)));
}}

.sidebar-header {{
    padding: var(--space-lg);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}}

.logo {{
    font-size: var(--font-2xl);
    font-weight: 800;
    background: var(--title-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
}}

.sidebar-nav {{
    padding: var(--space-sm) 0;
}}

.nav-item {{
    display: flex;
    align-items: center;
    padding: var(--space-md) var(--space-lg);
    color: var(--text-color);
    opacity: 0.8;
    text-decoration: none;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
    font-size: var(--font-base);
    min-height: var(--nav-height);
    gap: var(--space-sm);
}}

.nav-item:hover, .nav-item.active {{
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    border-left-color: var(--primary-color);
    transform: translateX(var(--space-xs));
}}

.nav-item i {{
    font-size: var(--font-lg);
    width: var(--space-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}}

.sidebar-toggle {{
    position: absolute;
    right: calc(-1 * var(--sidebar-collapsed));
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    width: var(--sidebar-collapsed);
    height: var(--touch-target);
    border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
    cursor: pointer;
    backdrop-filter: blur(5px);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--font-sm);
}}

/* Main Wrapper */
.main-wrapper {{
    margin-left: var(--sidebar-width);
    transition: margin-left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    min-height: 100vh;
}}

.main-wrapper.expanded {{
    margin-left: var(--sidebar-collapsed);
}}

/* Button System */
.btn {{
    padding: var(--space-sm) var(--space-md);
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
    min-height: var(--button-height);
    font-size: var(--font-sm);
    line-height: 1;
    white-space: nowrap;
}}

.btn-primary {{
    background: var(--primary-gradient);
    color: white;
    box-shadow: var(--shadow-md);
}}

.btn-primary:hover {{
    background: linear-gradient(45deg, var(--primary-hover), var(--secondary-hover));
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}}

.btn-secondary {{
    background: rgba(255, 255, 255, 0.1);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
}}

.btn-secondary:hover {{
    background: rgba(255, 255, 255, 0.2);
}}

.btn-large {{
    padding: var(--space-md) var(--space-xl);
    font-size: var(--font-lg);
    min-width: clamp(180px, 25vw, 250px);
    height: auto;
    min-height: var(--touch-target);
}}

.btn i {{
    margin-right: var(--space-xs);
}}

/* Footer Styles */
.footer {{
    background: var(--footer-bg);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding: var(--space-2xl) var(--container-padding) var(--space-xl);
    text-align: center;
}}

.footer-content {{
    max-width: var(--container-max);
    margin: 0 auto;
}}

.footer-links {{
    display: flex;
    justify-content: center;
    gap: var(--space-lg);
    margin-bottom: var(--space-xl);
    flex-wrap: wrap;
}}

.footer-link {{
    color: var(--text-color);
    opacity: 0.7;
    text-decoration: none;
    transition: color 0.3s ease;
    font-size: var(--font-sm);
    padding: var(--space-xs);
    min-height: var(--button-height);
    display: flex;
    align-items: center;
}}

.footer-link:hover {{
    color: var(--primary-color);
}}

.footer-bottom {{
    padding-top: var(--space-xl);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    opacity: 0.5;
    font-size: var(--font-sm);
    line-height: 1.6;
}}

/* Loading States */
.loading {{
    background: linear-gradient(90deg, #1a1a1a 25%, #2a2a2a 50%, #1a1a1a 75%);
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
}}

@keyframes shimmer {{
    0% {{ background-position: -200% 0; }}
    100% {{ background-position: 200% 0; }}
}}

/* Spin Animation */
@keyframes spin {{
    0% {{ transform: rotate(0deg); }}
    100% {{ transform: rotate(360deg); }}
}}

/* Glow Animation */
@keyframes glow {{
    from {{ filter: brightness(1); }}
    to {{ filter: brightness(1.1); }}
}}

/* Mobile Sidebar Toggle */
.mobile-sidebar-toggle {{
    position: fixed;
    top: var(--space-md);
    left: var(--space-md);
    z-index: 1001;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    width: var(--touch-target);
    height: var(--touch-target);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    backdrop-filter: blur(5px);
    font-size: var(--font-lg);
    display: none;
    align-items: center;
    justify-content: center;
}}

.mobile-sidebar-toggle i {{
    font-size: var(--font-lg);
}}

.sidebar-overlay {{
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1500;
    backdrop-filter: blur(2px);
}}

.sidebar-overlay.active {{
    display: block;
}}

/* Mobile Responsive Styles */
@media (max-width: 768px) {{
    :root {{
        --sidebar-width: min(280px, 85vw);
    }}
    
    .sidebar {{
        transform: translateX(-100%);
        z-index: 2000;
    }}
    
    .main-wrapper {{
        margin-left: 0;
    }}
    
    .main-wrapper.expanded {{
        margin-left: 0;
    }}
    
    .sidebar.mobile-open {{
        transform: translateX(0);
    }}

    .mobile-sidebar-toggle {{
        display: flex;
    }}

    .sidebar-toggle {{
        display: none;
    }}

    .btn-large {{
        width: 100%;
        max-width: min(300px, 90vw);
    }}

    .footer-links {{
        flex-direction: column;
        gap: var(--space-sm);
    }}
}}

@media (min-width: 769px) {{
    .mobile-sidebar-toggle {{
        display: none !important;
    }}
    
    .sidebar-toggle {{
        display: flex;
    }}
}}

/* Accessibility */
.btn:focus-visible,
.nav-item:focus-visible,
.sidebar-toggle:focus-visible,
.mobile-sidebar-toggle:focus-visible,
.footer-link:focus-visible {{
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}}

/* Reduced Motion */
@media (prefers-reduced-motion: reduce) {{
    * {{
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }}
}}"""
        
        # Save base CSS
        base_css_path = self.css_dir / "base.css"
        with open(base_css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        self.log_debug(f"Generated base.css: {base_css_path}")
        return base_css_path
    
    def generate_base_js(self):
        """Generate base JavaScript file with all shared functions"""
        self.log_debug("Generating base.js...")
        
        js_content = """/* Base JavaScript - Generated by Complete Website Generator */
/* Generated on """ + datetime.now().strftime("%B %d, %Y at %H:%M") + """ */

// Sidebar Functions
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const mainWrapper = document.getElementById('mainWrapper');
    const toggleBtn = document.querySelector('.sidebar-toggle i');
    
    sidebar.classList.toggle('collapsed');
    mainWrapper.classList.toggle('expanded');
    
    if (sidebar.classList.contains('collapsed')) {
        toggleBtn.className = 'fas fa-chevron-right';
    } else {
        toggleBtn.className = 'fas fa-chevron-left';
    }
}

function toggleMobileSidebar() {
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebarOverlay');
    const toggleBtn = document.getElementById('mobileSidebarToggle');
    
    sidebar.classList.toggle('mobile-open');
    overlay.classList.toggle('active');
    
    const isOpen = sidebar.classList.contains('mobile-open');
    toggleBtn.setAttribute('aria-label', isOpen ? 'Close menu' : 'Open menu');
    
    document.body.style.overflow = isOpen ? 'hidden' : '';
}

function closeMobileSidebar() {
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebarOverlay');
    const toggleBtn = document.getElementById('mobileSidebarToggle');
    
    sidebar.classList.remove('mobile-open');
    overlay.classList.remove('active');
    document.body.style.overflow = '';
    
    toggleBtn.setAttribute('aria-label', 'Open menu');
}

// Image Handling Functions
function handleImageLoad(img) {
    img.classList.remove('loading', 'error');
    
    // Add loading success animation
    img.style.opacity = '0';
    setTimeout(() => {
        img.style.transition = 'opacity 0.3s ease';
        img.style.opacity = '1';
    }, 50);
}

function handleImageError(img) {
    img.classList.remove('loading');
    img.classList.add('error');
    
    // Try to load a fallback image based on game type
    if (!img.dataset.fallbackAttempted) {
        img.dataset.fallbackAttempted = 'true';
        
        // Generate a fallback image URL
        const gameTitle = img.alt || 'Slot Game';
        const fallbackUrl = generateFallbackImage(gameTitle);
        
        if (fallbackUrl !== img.src) {
            img.src = fallbackUrl;
            return;
        }
    }
    
    // If fallback also fails, show styled error state
    img.style.display = 'flex';
    img.innerHTML = '<div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: var(--text-color); opacity: 0.6; text-align: center;"><div style="font-size: 2rem; margin-bottom: 8px;">üé∞</div><div style="font-size: 0.8rem;">Game Image</div></div>';
}

function generateFallbackImage(gameTitle) {
    // Generate a themed fallback based on game title
    const seedValue = gameTitle.toLowerCase().split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
    const imageId = 1500000000 + (seedValue % 1000);
    return `https://images.unsplash.com/photo-${imageId}?w=400&h=267&fit=crop&auto=format`;
}

function initializeImageLoading() {
    // Add loading class to all images initially
    document.querySelectorAll('.card-thumbnail, .game-thumbnail, .similar-game-image').forEach(img => {
        if (!img.complete) {
            img.classList.add('loading');
        }
    });
}

// Analytics Functions
// (trackGameClick removed)

// Initialize on DOM Ready
document.addEventListener('DOMContentLoaded', () => {
    // Initialize image loading states
    initializeImageLoading();
    
    // Setup mobile navigation
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
            if (window.innerWidth <= 768) {
                closeMobileSidebar();
            }
        });
    });
    
    // Log initialization
    console.log('üé∞ Website powered by SlotsLaunch API - Real casino games loaded!');
});

// Performance Monitoring
window.addEventListener('load', () => {
    console.log('üöÄ Website fully loaded and optimized!');
    
    // Report loading performance
    if ('performance' in window) {
        const loadTime = Math.round(performance.now());
        console.log(`‚ö° Load time: ${loadTime}ms`);
    }
});"""
        
        # Save base JS
        base_js_path = self.js_dir / "base.js"
        with open(base_js_path, 'w', encoding='utf-8') as f:
            f.write(js_content)
        
        self.log_debug(f"Generated base.js: {base_js_path}")
        return base_js_path
    
    def generate_homepage_css(self):
        """Generate homepage-specific CSS"""
        self.log_debug("Generating homepage.css...")
        
        css_content = """/* Homepage Specific Styles */

/* Hero Section */
.hero {
    padding: var(--space-3xl) var(--container-padding);
    text-align: center;
    position: relative;
    overflow: hidden;
    min-height: clamp(50vh, calc(60vh + 10vw), 90vh);
    display: flex;
    align-items: center;
    justify-content: center;
}

.hero-content {
    max-width: var(--content-max);
    margin: 0 auto;
    position: relative;
    z-index: 2;
}

.hero h1 {
    font-size: var(--font-4xl);
    font-weight: 900;
    margin-bottom: var(--space-md);
    background: var(--title-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: glow 3s ease-in-out infinite alternate;
    line-height: 1.1;
}

.hero p {
    font-size: var(--font-lg);
    color: var(--text-color);
    opacity: 0.8;
    margin-bottom: var(--space-xl);
    line-height: 1.6;
}

.hero-buttons {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    flex-wrap: wrap;
}

/* Content Sections */
.content-section {
    padding: var(--space-2xl) var(--container-padding);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.section-header {
    text-align: center;
    margin-bottom: var(--space-2xl);
}

.section-title {
    font-size: var(--font-3xl);
    font-weight: 800;
    margin-bottom: var(--space-md);
    background: var(--primary-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
}

.section-subtitle {
    color: var(--text-color);
    opacity: 0.7;
    font-size: var(--font-base);
    max-width: var(--content-max);
    margin: 0 auto;
    line-height: 1.6;
}

/* Card Grid System */
.cards-container {
    position: relative;
    max-width: var(--container-max);
    margin: 0 auto;
    overflow: hidden;
    border-radius: var(--border-radius-lg);
}

.cards-slider {
    display: flex;
    gap: var(--card-gap);
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
}

.cards-slider.no-transition {
    transition: none;
}

.cards-slider .card {
    flex: 0 0 auto;
}

.slider-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    width: var(--touch-target);
    height: var(--touch-target);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
    z-index: 10;
    font-size: var(--font-base);
}

.slider-nav:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
}

.slider-nav i {
    font-size: var(--font-sm);
}

.slider-prev {
    left: calc(-1 * var(--touch-target) / 2);
}

.slider-next {
    right: calc(-1 * var(--touch-target) / 2);
}

.slider-dots {
    display: flex;
    justify-content: center;
    gap: var(--space-xs);
    margin-top: var(--space-xl);
    flex-wrap: wrap;
}

.slider-dot {
    width: clamp(10px, 2vw, 16px);
    height: clamp(10px, 2vw, 16px);
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
}

.slider-dot.active {
    background: var(--primary-color);
    transform: scale(1.2);
}

/* Card Styles */
.card {
    position: relative;
    border-radius: var(--border-radius-lg);
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden;
    width: var(--card-width);
    min-width: clamp(160px, 20vw, 200px);
    background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
    box-shadow: var(--shadow-md);
}

.card-thumbnail {
    width: 100%;
    aspect-ratio: 3/2;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease;
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
}

.card:hover .card-thumbnail {
    transform: scale(1.05);
}

.card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        to bottom, 
        rgba(0, 0, 0, 0.1) 0%, 
        rgba(0, 0, 0, 0.6) 100%
    );
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    padding: var(--space-md);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.card:hover .card-overlay {
    opacity: 1;
}

.card-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
}

.card-title {
    font-size: var(--font-lg);
    font-weight: 700;
    color: white;
    line-height: 1.2;
    text-align: center;
    margin-bottom: var(--space-sm);
}

.card-cta {
    background: var(--primary-gradient);
    color: white;
    border: none;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--border-radius-md);
    font-weight: 600;
    font-size: var(--font-sm);
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    text-align: center;
    text-decoration: none;
    display: block;
    position: relative;
    overflow: hidden;
}

.card-cta:hover {
    background: linear-gradient(45deg, var(--primary-hover), var(--secondary-hover));
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.card-cta:active {
    transform: translateY(0);
}

/* About Section */
.about-section {
    padding: var(--space-2xl) var(--container-padding);
    background: linear-gradient(135deg, var(--about-bg-start) 0%, var(--about-bg-end) 100%);
}

.about-content {
    max-width: var(--content-max);
    margin: 0 auto;
    text-align: center;
}

.about-content p {
    font-size: var(--font-base);
    color: var(--text-color);
    opacity: 0.8;
    margin-bottom: var(--space-lg);
    line-height: 1.7;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .hero {
        min-height: clamp(40vh, calc(50vh + 5vw), 70vh);
    }

    .slider-prev {
        left: calc(-1 * var(--touch-target) / 3);
    }
    
    .slider-next {
        right: calc(-1 * var(--touch-target) / 3);
    }

    .card-overlay {
        opacity: 1;
        background: linear-gradient(
            to bottom, 
            rgba(0, 0, 0, 0.1) 0%, 
            rgba(0, 0, 0, 0.5) 100%
        );
    }

    .card {
        min-width: clamp(140px, 45vw, 180px);
    }

    .card-title {
        font-size: var(--font-base);
        text-align: center;
    }

    .card-cta {
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--font-xs);
    }
}"""
        
        homepage_css_path = self.css_dir / "homepage.css"
        with open(homepage_css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        self.log_debug(f"Generated homepage.css: {homepage_css_path}")
        return homepage_css_path
    
    def generate_games_css(self):
        """Generate games page specific CSS"""
        self.log_debug("Generating games.css...")
        
        css_content = """/* Games Page Specific Styles */

/* Games Header */
.games-header {
    padding: var(--space-2xl) var(--container-padding) var(--space-xl);
    text-align: center;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.games-header h1 {
    font-size: var(--font-4xl);
    font-weight: 900;
    margin-bottom: var(--space-md);
    background: var(--title-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.1;
}

.games-header p {
    font-size: var(--font-lg);
    color: var(--text-color);
    opacity: 0.7;
    max-width: var(--content-max);
    margin: 0 auto var(--space-lg);
    line-height: 1.6;
}

.games-count {
    display: inline-block;
    background: var(--primary-gradient);
    color: white;
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--border-radius-md);
    font-weight: 600;
    font-size: var(--font-sm);
}

/* Games Grid */
.games-section {
    padding: var(--space-2xl) var(--container-padding);
}

.games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--card-width), 1fr));
    gap: var(--card-gap);
    max-width: var(--container-max);
    margin: 0 auto;
}

/* Game Card Styling */
.game-card {
    position: relative;
    border-radius: var(--border-radius-lg);
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden;
    background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
    box-shadow: var(--shadow-md);
}

.game-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
}

.game-thumbnail {
    width: 100%;
    aspect-ratio: 3/2;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease;
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
}

.game-card:hover .game-thumbnail {
    transform: scale(1.05);
}

.game-thumbnail.loading {
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
    position: relative;
}

.game-thumbnail.loading::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

.game-thumbnail.error {
    background: linear-gradient(45deg, #2a1a1a, #3a2a2a);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
    opacity: 0.5;
    font-size: var(--font-sm);
    flex-direction: column;
}

.game-thumbnail.error::before {
    content: 'üé∞';
    font-size: var(--font-2xl);
    margin-bottom: var(--space-xs);
}

.game-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        to bottom, 
        rgba(0, 0, 0, 0.1) 0%, 
        rgba(0, 0, 0, 0.7) 100%
    );
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    padding: var(--space-md);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.game-card:hover .game-overlay {
    opacity: 1;
}

.game-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
}

.game-title {
    font-size: var(--font-lg);
    font-weight: 700;
    color: white;
    line-height: 1.2;
    text-align: center;
    margin-bottom: var(--space-sm);
}

.game-cta {
    background: var(--primary-gradient);
    color: white;
    border: none;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--border-radius-md);
    font-weight: 600;
    font-size: var(--font-sm);
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    text-align: center;
    text-decoration: none;
    display: block;
    position: relative;
    overflow: hidden;
}

.game-cta:hover {
    background: linear-gradient(45deg, var(--primary-hover), var(--secondary-hover));
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.game-cta:active {
    transform: translateY(0);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .games-grid {
        grid-template-columns: repeat(auto-fill, minmax(clamp(140px, 45vw, 200px), 1fr));
        gap: var(--space-md);
    }

    .game-overlay {
        opacity: 1;
        background: linear-gradient(
            to bottom, 
            rgba(0, 0, 0, 0.1) 0%, 
            rgba(0, 0, 0, 0.6) 100%
        );
    }

    .game-title {
        font-size: var(--font-base);
    }

    .game-cta {
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--font-xs);
    }
}"""
        
        games_css_path = self.css_dir / "games.css"
        with open(games_css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        self.log_debug(f"Generated games.css: {games_css_path}")
        return games_css_path
    
    def generate_game_css(self):
        """Generate individual game page specific CSS"""
        self.log_debug("Generating game.css...")
        
        css_content = """/* Individual Game Page Specific Styles */

/* Game Header */
.game-header {
    padding: var(--space-xl) var(--container-padding) var(--space-lg);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.02) 0%, rgba(255, 255, 255, 0.05) 100%);
}

.game-header-content {
    max-width: var(--container-max);
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
}

.breadcrumb {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    font-size: var(--font-sm);
    color: var(--text-color);
    opacity: 0.6;
}

.breadcrumb a {
    color: var(--primary-color);
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb a:hover {
    color: var(--accent-color);
}

.breadcrumb-separator {
    color: var(--text-color);
    opacity: 0.4;
    margin: 0 var(--space-xs);
}

.game-title {
    font-size: var(--font-3xl);
    font-weight: 900;
    background: var(--title-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
    margin-bottom: var(--space-sm);
}

.game-meta {
    display: flex;
    gap: var(--space-lg);
    flex-wrap: wrap;
    align-items: center;
}

.game-provider {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    color: var(--text-color);
    opacity: 0.7;
    font-size: var(--font-sm);
}

.provider-badge {
    background: var(--primary-gradient);
    color: white;
    padding: var(--space-3xs) var(--space-sm);
    border-radius: var(--border-radius-sm);
    font-weight: 600;
    font-size: var(--font-xs);
}

/* Game Container */
.game-container {
    padding: var(--space-xl) var(--container-padding);
    max-width: var(--container-max);
    margin: 0 auto;
}

.game-wrapper {
    position: relative;
    width: 100%;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-xl);
    backdrop-filter: blur(10px);
}

.game-iframe-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
}

.game-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: var(--border-radius-lg);
}

.game-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: var(--text-color);
    opacity: 0.7;
    z-index: 10;
}

.game-loading-spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto var(--space-md);
}

.fullscreen-btn {
    position: absolute;
    top: var(--space-md);
    right: var(--space-md);
    background: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    padding: var(--space-sm);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
    z-index: 20;
    font-size: var(--font-base);
}

.fullscreen-btn:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.05);
}

/* Game Info Section */
.game-info-section {
    padding: var(--space-xl) var(--container-padding);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.02) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.game-info-content {
    max-width: var(--container-max);
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
}

.game-description {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-lg);
    padding: var(--space-xl);
}

.game-description h3 {
    font-size: var(--font-xl);
    font-weight: 700;
    margin-bottom: var(--space-md);
    color: var(--primary-color);
}

.game-description p {
    color: var(--text-color);
    opacity: 0.8;
    line-height: 1.7;
    margin-bottom: var(--space-md);
}

/* Similar Games Section */
.similar-games {
    padding: var(--space-2xl) var(--container-padding);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.similar-games-content {
    max-width: var(--container-max);
    margin: 0 auto;
}

.similar-games h3 {
    font-size: var(--font-2xl);
    font-weight: 800;
    margin-bottom: var(--space-xl);
    text-align: center;
    background: var(--primary-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.similar-games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: var(--space-lg);
}

.similar-game-card {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    transition: all 0.3s ease;
    cursor: pointer;
}

.similar-game-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    background: rgba(255, 255, 255, 0.05);
}

.similar-game-image {
    width: 100%;
    aspect-ratio: 3/2;
    object-fit: cover;
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
}

.similar-game-info {
    padding: var(--space-md);
}

.similar-game-title {
    font-size: var(--font-lg);
    font-weight: 600;
    margin-bottom: var(--space-xs);
    color: white;
}

.similar-game-provider {
    font-size: var(--font-sm);
    color: var(--text-color);
    opacity: 0.6;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .game-header-content {
        text-align: center;
    }

    .game-meta {
        justify-content: center;
    }

    .game-iframe-container {
        padding-bottom: 75%; /* More square aspect ratio for mobile */
    }

    .fullscreen-btn {
        top: var(--space-sm);
        right: var(--space-sm);
        padding: var(--space-xs);
        font-size: var(--font-sm);
    }

    .similar-games-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: var(--space-md);
    }
}

/* Accessibility */
.fullscreen-btn:focus-visible,
.similar-game-card:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}"""
        
        game_css_path = self.css_dir / "game.css"
        with open(game_css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        self.log_debug(f"Generated game.css: {game_css_path}")
        return game_css_path
    
    def generate_legal_css(self):
        """Generate legal pages specific CSS"""
        self.log_debug("Generating legal.css...")
        
        css_content = """/* Legal Pages Specific Styles */

/* Page Header */
.page-header {
    padding: var(--space-2xl) var(--container-padding) var(--space-xl);
    text-align: center;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.02) 0%, rgba(255, 255, 255, 0.05) 100%);
}

.page-header h1 {
    font-size: var(--font-4xl);
    font-weight: 900;
    margin-bottom: var(--space-md);
    background: var(--title-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.1;
}

.page-header p {
    font-size: var(--font-lg);
    color: var(--text-color);
    opacity: 0.7;
    max-width: var(--content-max);
    margin: 0 auto;
    line-height: 1.6;
}

/* Content Section */
.content-section {
    padding: var(--space-2xl) var(--container-padding);
    max-width: var(--container-max);
    margin: 0 auto;
}

.content-wrapper {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-lg);
    padding: var(--space-2xl);
    backdrop-filter: blur(10px);
}

.content-wrapper h2 {
    font-size: var(--font-2xl);
    font-weight: 700;
    margin-bottom: var(--space-lg);
    color: var(--primary-color);
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    padding-bottom: var(--space-sm);
}

.content-wrapper h3 {
    font-size: var(--font-xl);
    font-weight: 600;
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
    color: var(--accent-color);
}

.content-wrapper p {
    font-size: var(--font-base);
    color: var(--text-color);
    opacity: 0.9;
    margin-bottom: var(--space-md);
    line-height: 1.7;
    text-align: justify;
}

.content-wrapper ul {
    margin: var(--space-md) 0;
    padding-left: var(--space-xl);
}

.content-wrapper li {
    font-size: var(--font-base);
    color: var(--text-color);
    opacity: 0.9;
    margin-bottom: var(--space-xs);
    line-height: 1.7;
}

.content-wrapper strong {
    color: var(--primary-color);
    font-weight: 600;
}

.last-updated {
    text-align: center;
    margin-top: var(--space-xl);
    padding-top: var(--space-lg);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    opacity: 0.6;
    font-size: var(--font-sm);
    font-style: italic;
}

/* Footer Modifications for Legal Pages */
.footer-link.active {
    color: var(--primary-color);
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-sm);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .content-wrapper {
        padding: var(--space-lg);
    }
}"""
        
        legal_css_path = self.css_dir / "legal.css"
        with open(legal_css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        
        self.log_debug(f"Generated legal.css: {legal_css_path}")
        return legal_css_path
    
    def generate_homepage_js(self):
        """Generate homepage-specific JavaScript"""
        self.log_debug("Generating homepage.js...")
        
        js_content = """/* Homepage Specific JavaScript */

// Dynamic Slider System
class DynamicSlider {
    constructor(sliderId) {
        this.sliderId = sliderId;
        this.sliderElement = document.getElementById(sliderId + 'Slider');
        if (!this.sliderElement) return;
        
        this.originalCards = Array.from(this.sliderElement.children);
        this.currentIndex = 0;
        this.isTransitioning = false;
        this.cardsPerView = 1;
        this.cardWidth = 250;
        this.gap = 24;
        
        this.init();
        this.setupEventListeners();
    }

    init() {
        this.calculateLayout();
        this.cloneCards();
        this.setupInitialPosition();
        this.createDots();
        this.updateDots();
    }

    calculateLayout() {
        const containerWidth = this.sliderElement.parentElement.offsetWidth;
        const screenWidth = window.innerWidth;
        
        if (this.sliderElement.children.length > 0) {
            const firstCard = this.sliderElement.children[0];
            const cardRect = firstCard.getBoundingClientRect();
            this.cardWidth = Math.round(cardRect.width);
            
            const computedGap = getComputedStyle(this.sliderElement).columnGap;
            this.gap = computedGap && computedGap !== 'normal' ? parseFloat(computedGap) : 24;
        } else {
            this.cardWidth = 250;
            this.gap = 24;
        }
        
        let navButtonsWidth = 0;
        const sliderContainer = this.sliderElement.parentElement;
        const prevButton = sliderContainer.querySelector('.slider-prev');
        const nextButton = sliderContainer.querySelector('.slider-next');
        
        if (prevButton && nextButton) {
            const prevRect = prevButton.getBoundingClientRect();
            const nextRect = nextButton.getBoundingClientRect();
            navButtonsWidth = prevRect.width + nextRect.width + 20;
        } else {
            navButtonsWidth = 100;
        }
        
        const availableWidth = containerWidth - navButtonsWidth;
        const totalCardSpace = this.cardWidth + this.gap;
        
        if (screenWidth <= 480) {
            this.cardsPerView = 1;
        } else if (screenWidth <= 768) {
            this.cardsPerView = Math.min(2, Math.floor(availableWidth / totalCardSpace));
        } else if (screenWidth <= 1024) {
            this.cardsPerView = Math.min(3, Math.floor(availableWidth / totalCardSpace));
        } else if (screenWidth <= 1440) {
            this.cardsPerView = Math.min(4, Math.floor(availableWidth / totalCardSpace));
        } else {
            this.cardsPerView = Math.min(5, Math.floor(availableWidth / totalCardSpace));
        }
        
        this.cardsPerView = Math.max(1, this.cardsPerView);
    }

    cloneCards() {
        this.sliderElement.innerHTML = '';
        
        const clonesToPrepend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        const clonesToAppend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        
        for (let i = this.originalCards.length - clonesToPrepend; i < this.originalCards.length; i++) {
            const clone = this.originalCards[i].cloneNode(true);
            clone.classList.add('clone');
            this.sliderElement.appendChild(clone);
        }
        
        this.originalCards.forEach(card => {
            const clone = card.cloneNode(true);
            this.sliderElement.appendChild(clone);
        });
        
        for (let i = 0; i < clonesToAppend; i++) {
            const clone = this.originalCards[i].cloneNode(true);
            clone.classList.add('clone');
            this.sliderElement.appendChild(clone);
        }
    }

    setupInitialPosition() {
        const clonesToPrepend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        this.currentIndex = clonesToPrepend;
        this.updatePosition(false);
    }

    updatePosition(animate = true) {
        if (animate && !this.isTransitioning) {
            this.sliderElement.classList.remove('no-transition');
            this.isTransitioning = true;
            setTimeout(() => {
                this.isTransitioning = false;
            }, 500);
        } else if (!animate) {
            this.sliderElement.classList.add('no-transition');
        }

        const translateX = -(this.currentIndex * (this.cardWidth + this.gap));
        this.sliderElement.style.transform = `translateX(${translateX}px)`;

        if (animate) {
            setTimeout(() => {
                this.handleInfiniteLoop();
            }, 500);
        }
    }

    handleInfiniteLoop() {
        const clonesToPrepend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        const totalOriginalCards = this.originalCards.length;

        if (this.currentIndex >= clonesToPrepend + totalOriginalCards) {
            this.currentIndex = clonesToPrepend;
            this.updatePosition(false);
        } else if (this.currentIndex < clonesToPrepend) {
            this.currentIndex = clonesToPrepend + totalOriginalCards - 1;
            this.updatePosition(false);
        }

        this.updateDots();
    }

    slide(direction) {
        if (this.isTransitioning) return;
        this.currentIndex += direction;
        this.updatePosition(true);
        this.updateDots();
    }

    createDots() {
        const dotsContainer = document.getElementById(this.sliderId + 'Dots');
        if (!dotsContainer) return;
        
        dotsContainer.innerHTML = '';
        
        const totalSlides = Math.ceil(this.originalCards.length / this.cardsPerView);
        const maxDots = window.innerWidth <= 768 ? 6 : 8;
        
        for (let i = 0; i < Math.min(totalSlides, maxDots); i++) {
            const dot = document.createElement('button');
            dot.className = 'slider-dot';
            dot.type = 'button';
            dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
            
            const goToSlideHandler = () => this.goToSlide(i * this.cardsPerView);
            dot.onclick = goToSlideHandler;
            dot.onkeydown = (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    goToSlideHandler();
                }
            };
            
            dotsContainer.appendChild(dot);
        }
    }

    goToSlide(index) {
        if (this.isTransitioning) return;
        const clonesToPrepend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        this.currentIndex = clonesToPrepend + index;
        this.updatePosition(true);
        this.updateDots();
    }

    updateDots() {
        const dots = document.querySelectorAll(`#${this.sliderId}Dots .slider-dot`);
        const clonesToPrepend = Math.min(this.cardsPerView * 2, this.originalCards.length);
        const relativeIndex = this.currentIndex - clonesToPrepend;
        const currentSlide = Math.floor(relativeIndex / this.cardsPerView);
        
        dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentSlide);
        });
    }

    handleResize() {
        this.calculateLayout();
        this.cloneCards();
        this.setupInitialPosition();
        this.createDots();
        this.updateDots();
    }

    setupEventListeners() {
        let touchStartX = 0;
        let touchEndX = 0;
        let touchStartY = 0;
        let touchEndY = 0;

        this.sliderElement.addEventListener('touchstart', (e) => {
            touchStartX = e.changedTouches[0].screenX;
            touchStartY = e.changedTouches[0].screenY;
        }, {passive: true});

        this.sliderElement.addEventListener('touchend', (e) => {
            touchEndX = e.changedTouches[0].screenX;
            touchEndY = e.changedTouches[0].screenY;
            this.handleSwipe(touchStartX, touchEndX, touchStartY, touchEndY);
        }, {passive: true});
    }

    handleSwipe(startX, endX, startY, endY) {
        const swipeThreshold = 50;
        const diffX = startX - endX;
        const diffY = Math.abs(startY - endY);
        
        if (Math.abs(diffX) > swipeThreshold && Math.abs(diffX) > diffY) {
            if (diffX > 0) {
                this.slide(1);
            } else {
                this.slide(-1);
            }
        }
    }
}

// Initialize all sliders
let sliders = {};

function initializeSliders() {
    // Find all slider containers and initialize them
    document.querySelectorAll('[id$="Slider"]').forEach(sliderElement => {
        const sliderId = sliderElement.id.replace('Slider', '');
        sliders[sliderId] = new DynamicSlider(sliderId);
    });
}

function slideCards(sliderId, direction) {
    if (sliders[sliderId]) {
        sliders[sliderId].slide(direction);
    }
}

let resizeTimeout;
function handleResize() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        Object.values(sliders).forEach(slider => {
            if (slider && slider.handleResize) {
                slider.handleResize();
            }
        });
    }, 150);
}

window.addEventListener('resize', handleResize, {passive: true});

document.addEventListener('DOMContentLoaded', () => {
    initializeSliders();
    handleResize();
});"""
        
        homepage_js_path = self.js_dir / "homepage.js"
        with open(homepage_js_path, 'w', encoding='utf-8') as f:
            f.write(js_content)
        
        self.log_debug(f"Generated homepage.js: {homepage_js_path}")
        return homepage_js_path
    
    def generate_game_js(self):
        """Generate individual game page specific JavaScript"""
        self.log_debug("Generating game.js...")
        
        js_content = """/* Individual Game Page Specific JavaScript */

function hideLoading() {
    const loadingElement = document.getElementById('gameLoading');
    if (loadingElement) {
        loadingElement.style.display = 'none';
    }
}

function showError() {
    const loadingElement = document.getElementById('gameLoading');
    if (loadingElement) {
        loadingElement.innerHTML = `
            <div style="text-align: center; color: var(--text-color); opacity: 0.7;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem; color: #ff6b6b;"></i>
                <p>Unable to load the game. Please try again later.</p>
                <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: var(--primary-gradient); border: none; border-radius: 8px; color: white; cursor: pointer;">
                    Retry
                </button>
            </div>
        `;
    }
}

function toggleFullscreen() {
    const gameWrapper = document.querySelector('.game-wrapper');
    const fullscreenBtn = document.querySelector('.fullscreen-btn i');
    
    if (!document.fullscreenElement) {
        gameWrapper.requestFullscreen().then(() => {
            fullscreenBtn.className = 'fas fa-compress';
        }).catch(err => {
            console.log('Error attempting to enable fullscreen:', err.message);
        });
    } else {
        document.exitFullscreen().then(() => {
            fullscreenBtn.className = 'fas fa-expand';
        });
    }
}

document.addEventListener('fullscreenchange', () => {
    const fullscreenBtn = document.querySelector('.fullscreen-btn i');
    if (document.fullscreenElement) {
        fullscreenBtn.className = 'fas fa-compress';
    } else {
        fullscreenBtn.className = 'fas fa-expand';
    }
});

document.addEventListener('DOMContentLoaded', () => {
    // Get game title from the page
    const gameTitle = document.querySelector('.game-title')?.textContent || 'Game';
    
    console.log('üéÆ Game page loaded:', gameTitle);
    
    // Track game view
    if (typeof gtag !== 'undefined') {
        gtag('event', 'game_view', {
            'game_title': gameTitle,
            'event_category': 'games',
            'event_label': gameTitle
        });
    }
});
"""
        game_js_path = self.js_dir / "game.js"
        with open(game_js_path, 'w', encoding='utf-8') as f:
            f.write(js_content)
        
        self.log_debug(f"Generated game.js: {game_js_path}")
        return game_js_path
     
    def download_image(self, image_url, filename):
        """Download image from URL and save locally with better error handling"""
        try:
            filepath = self.images_dir / filename
            
            if filepath.exists():
                self.log_debug(f"Image already exists: {filename}")
                return f"images/games/{filename}"
            
            self.log_debug(f"Downloading: {filename} from {image_url}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(image_url, timeout=15, stream=True, headers=headers)
            response.raise_for_status()
            
            content_type = response.headers.get('content-type', '').lower()
            if not any(img_type in content_type for img_type in ['image/', 'jpeg', 'jpg', 'png', 'webp']):
                self.log_debug(f"Invalid content type for {filename}: {content_type}")
                return None
            
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            self.log_debug(f"Successfully saved: {filename}")
            return f"images/games/{filename}"
            
        except Exception as e:
            self.log_debug(f"Failed to download {filename}: {e}")
            return None
    
    def download_images_concurrently(self, image_tasks):
        """Download multiple images concurrently for faster processing"""
        results = {}
        futures = {}
        
        # Submit all download tasks
        for game_id, (image_url, filename) in image_tasks.items():
            future = self.download_executor.submit(self.download_image, image_url, filename)
            futures[future] = game_id
        
        # Collect results as they complete
        for future in as_completed(futures):
            game_id = futures[future]
            try:
                result = future.result()
                results[game_id] = result
            except Exception as e:
                self.log_debug(f"Error downloading image for game {game_id}: {e}")
                results[game_id] = None
        
        return results
    
    def sanitize_filename(self, name):
        """Sanitize filename for safe file system usage"""
        safe_name = re.sub(r'[^a-zA-Z0-9\-_]', '-', name.lower())
        safe_name = re.sub(r'-+', '-', safe_name)
        safe_name = safe_name.strip('-')
        return safe_name[:50]
    
    def respect_rate_limit(self):
        """Implement rate limiting for SlotsLaunch API"""
        with self.api_lock:
            min_interval = 1.5  
            time_since_last = time.time() - self.last_api_call
            
            if time_since_last < min_interval:
                sleep_time = min_interval - time_since_last
                self.log_debug(f"Rate limiting: waiting {sleep_time:.1f}s...")
                time.sleep(sleep_time)
            
            self.last_api_call = time.time()
    
    def get_slotslaunch_game_url(self, game_id, domain_name=None):
        """Get iframe URL for a specific game from SlotsLaunch"""
        url = f"{self.slotslaunch_base_url}/game-url"
        # Use the provided domain_name or fall back to self.default_domain
        domain = domain_name if domain_name else self.default_domain

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Origin': self.default_domain
        }

        params = {
            'token': self.slotslaunch_token,
            'game_id': game_id,
            'domain': domain,
            'currency': 'USD',
            'language': 'en'
        }

        self.respect_rate_limit()
        response = requests.get(url, params=params, headers=headers, timeout=15)

        if response.status_code == 200:
            data = response.json()
            game_url = data.get('url')
            if game_url:
                self.log_debug(f"Got game URL for {game_id}: {game_url[:50]}...")
                # Ensure token is present in the URL for direct embed
                from urllib.parse import urlparse, parse_qs, urlencode, urlunparse

                parsed = urlparse(game_url)
                query = parse_qs(parsed.query)
                if 'token' not in query or query['token'][0] != self.slotslaunch_token:
                    query['token'] = [self.slotslaunch_token]
                    new_query = urlencode(query, doseq=True)
                    game_url = urlunparse(parsed._replace(query=new_query))
                    self.log_debug(f"Appended token to game URL: {game_url[:80]}...")
                return game_url
            else:
                self.log_debug(f"No URL in response for {game_id}")
                # Fallback to direct embed URL with token
                fallback_url = f"https://slotslaunch.com/iframe/{game_id}?token={self.slotslaunch_token}"
                self.log_debug(f"Using fallback embed URL: {fallback_url}")
                return fallback_url
        else:
            self.log_debug(f"Failed to get game URL for {game_id}: {response.status_code}")
            # Fallback to direct embed URL with token
            fallback_url = f"https://slotslaunch.com/iframe/{game_id}?token={self.slotslaunch_token}"
            self.log_debug(f"Using fallback embed URL: {fallback_url}")
            return fallback_url
    
    def validate_game_data(self, game):
        """Validate and clean game data from API"""
        if not isinstance(game, dict):
            return None
            
        if not game.get('name') or not game.get('slug'):
            self.log_debug(f"Invalid game data - missing name or slug: {game}")
            return None
        
        validated_game = {
            'title': str(game['name']).strip(),
            'slug': str(game['slug']).strip(),
            'url': f"/games/{game['slug']}",
            'cta_text': 'Play Now',
            'game_id': game.get('id', game['slug']),
            'provider': game.get('provider', 'Unknown'),
            'description': game.get('description', ''),
            'image': None,  # Will be set after concurrent download
            'image_url': game.get('thumb') or game.get('image') or game.get('thumbnail')
        }
        
        # Get iframe URL
        validated_game['iframe_url'] = self.get_slotslaunch_game_url(validated_game['game_id'])
        
        return validated_game
    
    def fetch_slotslaunch_games(self, count=10):
        """Fetch games from SlotsLaunch API with enhanced error handling and concurrent image downloads.
        Ensures no more than one game is imported from the same API response page for true randomness."""
        self.log_debug(f"Fetching {count} games from SlotsLaunch API (one per page)...")

        url = f"{self.slotslaunch_base_url}/games"

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Origin': self.default_domain,
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        # Get meta info to determine last_page
        initial_params = {
            'token': self.slotslaunch_token,
            'page': 1,
            'per_page': 20,
            'published': 1,
            'order': 'asc',
            'order_by': 'name'
        }

        self.log_debug("Making initial API request for meta info...")
        self.respect_rate_limit()
        response = requests.get(url, params=initial_params, headers=headers, timeout=15)
        self.log_debug(f"API Response Status: {response.status_code}")

        if response.status_code != 200:
            self.log_debug(f"API Error {response.status_code}: {response.text[:200]}")
            return []

        data = response.json()
        meta = data.get('meta', {})
        last_page = meta.get('last_page', 1)
        total_games = meta.get('total', 0)

        self.log_debug(f"API Meta: {total_games} total games across {last_page} pages")

        if last_page == 0 or total_games == 0:
            self.log_debug("No games found from API")
            return []

        all_games = []
        used_slugs = set()
        used_pages = set()
        max_attempts = max(count * 3, 10)
        attempts = 0

        while len(all_games) < count and attempts < max_attempts and len(used_pages) < last_page:
            # Pick a random page not used yet
            available_pages = set(range(1, min(last_page, 50) + 1)) - used_pages
            if not available_pages:
                break
            random_page = random.choice(list(available_pages))
            used_pages.add(random_page)

            final_params = {
                'token': self.slotslaunch_token,
                'page': random_page,
                'per_page': 20,
                'published': 1,
                'order': 'random'
            }

            self.log_debug(f"Fetching page {random_page} for unique game...")
            self.respect_rate_limit()
            page_response = requests.get(url, params=final_params, headers=headers, timeout=15)
            if page_response.status_code == 200:
                page_data = page_response.json()
                page_games = page_data.get('data', [])
                random.shuffle(page_games)
                for game in page_games:
                    validated_game = self.validate_game_data(game)
                    if validated_game and validated_game['slug'] not in used_slugs:
                        all_games.append(validated_game)
                        used_slugs.add(validated_game['slug'])
                        self.log_debug(f"Added game from page {random_page}: {validated_game['title']}")
                        break  # Only one game per page
            attempts += 1

        if len(all_games) > count:
            all_games = random.sample(all_games, count)

        # Download images concurrently
        self.log_debug(f"Downloading images for {len(all_games)} games concurrently...")
        image_tasks = {}
        for game in all_games:
            if game['image_url']:
                image_filename = f"{self.sanitize_filename(game['slug'])}.jpg"
                image_tasks[game['slug']] = (game['image_url'], image_filename)

        image_results = self.download_images_concurrently(image_tasks)

        # Update games with downloaded image paths
        for game in all_games:
            if game['slug'] in image_results and image_results[game['slug']]:
                game['image'] = image_results[game['slug']]
            else:
                game['image'] = "images/games/placeholder.jpg"
            # Remove temporary image_url field
            game.pop('image_url', None)

        self.log_debug(f"Successfully processed {len(all_games)} valid games (one per page)")
        return all_games
    
    def generate_hero_image(self, chosen_theme, site_name, colors):
        """Generate a hero image using GPT's DALL-E based on the theme"""
        self.log_debug(f"Generating hero image using DALL-E for theme: {chosen_theme['name']}")
        
        # Create a detailed prompt for DALL-E based on the theme
        dalle_prompt = f"""Create a high-quality hero banner image for a social casino website with the following theme:
        
        Theme: {chosen_theme['name']}
        Description: {chosen_theme['description']}
        Mood: {', '.join(chosen_theme['mood'])}
        Feel: {chosen_theme['target_feel']}
        
        Visual Requirements:
        - Overall art direction: glossy, neon-rich, high-saturation 2.5-D look inspired by Huuuge Casino key art
          (bright rim-lights, chunky highlights, depth-of-field blur, floating confetti/coin particles)
        - Respect the chosen theme and description above: keep core setting, characters and props faithful
          (e.g. for ‚ÄúTemple of Anubis‚Äù retain sandstone pillars, Anubis statue, scarab gems, etc.)
        - Integrate unmistakable social-casino motifs: 777 marquee signage, slot-reel symbols, gold-coin showers,
          dice or poker chips‚Äîrendered in the Huuuge style
        - Colour palette: start with {colors['primary']}, {colors['secondary']}, {colors['accent']} and push them to vivid, glowing neon values
        - Composition: leave clean negative space in the upper-left quadrant for website headlines
        - Background: dark-to-mid-tone gradient so foreground elements pop
        - 16:9 aspect ratio, suitable for a website hero section
        - Professional yet playful social-casino vibe with high visual impact and atmosphere
        - ***Important: do **not** include any text, lettering or typography within the image***"""
    
        try:
            # Generate image using DALL-E
            response = self.client.images.generate(
                model="dall-e-3",
                prompt=dalle_prompt,
                size="1792x1024",  # Closest to 16:9 ratio
                quality="standard",
                n=1
            )
            
            image_url = response.data[0].url
            self.log_debug(f"DALL-E generated image URL: {image_url[:50]}...")
            
            # Download the generated image
            hero_filename = "hero-bg.jpg"
            hero_path = self.output_dir / hero_filename
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            img_response = requests.get(image_url, timeout=30, headers=headers)
            img_response.raise_for_status()
            
            with open(hero_path, 'wb') as f:
                f.write(img_response.content)
            
            self.log_debug(f"Hero image saved: {hero_filename}")
            return hero_filename
            
        except Exception as e:
            self.log_debug(f"Error generating hero image with DALL-E: {e}")
            raise

    def generate_favicon(self, chosen_theme, site_name, colors):
        """Generate a favicon using GPT's DALL-E based on the theme"""
        self.log_debug(f"Generating favicon using DALL-E for theme: {chosen_theme['name']}")
        # Create a prompt for a simple, square, casino-themed favicon
        dalle_prompt = f'''Create a simple, square favicon for a social casino website.
Theme: {chosen_theme['name']}
Description: {chosen_theme['description']}
Mood: {', '.join(chosen_theme['mood'])}
Feel: {chosen_theme['target_feel']}

Visual Requirements:
- 1:1 aspect ratio (square), 512x512px
- Minimal, bold, and easily recognizable at small sizes
- Use these colors: {colors['primary']}, {colors['secondary']}, {colors['accent']}
- Should include a casino/gaming element (e.g., slot machine, dice, card, chip, or similar)
- No text, no gradients, no background details, just a clean icon
- Transparent background
- Suitable for use as a website favicon
'''
        try:
            response = self.client.images.generate(
                model="dall-e-3",
                prompt=dalle_prompt,
                size="1024x1024",
                quality="standard",
                n=1
            )
            image_url = response.data[0].url
            self.log_debug(f"DALL-E generated favicon URL: {image_url[:50]}...")
            favicon_filename = "favicon.png"
            favicon_path = self.output_dir / favicon_filename
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            img_response = requests.get(image_url, timeout=30, headers=headers)
            img_response.raise_for_status()
            with open(favicon_path, 'wb') as f:
                f.write(img_response.content)
            self.log_debug(f"Favicon saved: {favicon_filename}")
            return favicon_filename
        except Exception as e:
            self.log_debug(f"Error generating favicon with DALL-E: {e}")
            raise
    
    def hex_to_rgb(self, hex_color):
        """Convert hex color to RGB tuple"""
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
    
    # clean_json_response is now obsolete; use json.loads directly everywhere.
    
    def generate_theme_ideas(self, domain_name):
        """Generate 3 theme ideas for the social casino website"""
        site_name = domain_name.replace('.com', '').replace('.', ' ').title()
        
        prompt = f"""You must respond with ONLY valid JSON. No explanations, no markdown, just JSON.

Generate 3 unique SOCIAL CASINO themed website ideas for {domain_name}.
Analyze the domain name "{site_name}" and create casino/slots themes based on its meaning.

Your themes should be:
- Specific to casino/slots gaming
- Visually descriptive and immersive
- Based on the domain name meaning
- Exciting and engaging for players

Return JSON in exactly this form:
{{
    "themes": [
        {{
            "name": "Themed Casino Name",
            "description": "Detailed visual casino theme description with specific imagery",
            "mood": ["exciting", "luxurious", "mystical"],
            "target_feel": "thrilling and immersive gaming experience"
        }},
        {{
            "name": "Second Themed Casino",
            "description": "Another detailed visual casino theme with different imagery",
            "mood": ["vibrant", "energetic", "fun"],
            "target_feel": "exciting and entertaining gaming adventure"
        }},
        {{
            "name": "Third Themed Casino",
            "description": "Third detailed visual casino theme with unique imagery",
            "mood": ["elegant", "sophisticated", "premium"],
            "target_feel": "high-end luxury gaming experience"
        }}
    ]
}}"""

        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a JSON generator. Respond only with valid JSON, no explanations."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=1000,
            response_format={"type": "json_object"}
        )

        content = response.choices[0].message.content
        self.log_debug(f"Raw theme response: {repr(content[:100])}...")

        obj = json.loads(content)
        if isinstance(obj, list):
            themes = obj
        elif isinstance(obj, dict) and "themes" in obj:
            themes = obj["themes"]
        else:
            raise ValueError("generate_theme_ideas: unexpected JSON")
        return themes[:3]
    
    def generate_color_palette(self, chosen_theme):
        """Generate complete color palette based on chosen theme"""
        prompt = f"""You must respond with ONLY valid JSON. No explanations, no markdown, just JSON.

        Generate a cohesive color palette for this casino website theme:
        Name: {chosen_theme['name']}
        Description: {chosen_theme['description']}
        Mood: {', '.join(chosen_theme['mood'])}
        Target Feel: {chosen_theme['target_feel']}

        Use colors that work well together and are casino-appropriate.

        Also, select a highly readable font color for the main text (either "#ffffff" for light text or "#000000" for dark text, or another color if it provides better contrast with the background). This color will be used for all main body and paragraph text. Name this property "text_color".

        Return exactly this JSON structure with hex colors:
        {{
            "primary": "#hex",
            "secondary": "#hex",
            "accent": "#hex",
            "background_start": "#hex",
            "background_end": "#hex",
            "primary_hover": "#hex",
            "secondary_hover": "#hex",
            "sidebar_start": "#hex",
            "sidebar_end": "#hex",
            "footer_bg": "#hex",
            "about_bg_start": "rgba(r, g, b, 0.05)",
            "about_bg_end": "rgba(r, g, b, 0.05)",
            "text_color": "#hex"
        }}"""
        
        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a color palette generator. Respond only with valid JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=500,
            response_format={"type": "json_object"}
        )
        
        content = response.choices[0].message.content
        colors = json.loads(content)

        # Ensure hover colors are set
        if 'primary_hover' not in colors:
            colors['primary_hover'] = self.darken_color(colors['primary'], 0.1)
        if 'secondary_hover' not in colors:
            colors['secondary_hover'] = self.darken_color(colors['secondary'], 0.1)

        # Generate about section background colors if not provided
        if 'about_bg_start' not in colors:
            primary_rgb = self.hex_to_rgb(colors['primary'])
            colors['about_bg_start'] = f"rgba({primary_rgb[0]}, {primary_rgb[1]}, {primary_rgb[2]}, 0.05)"

        if 'about_bg_end' not in colors:
            accent_rgb = self.hex_to_rgb(colors['accent'])
            colors['about_bg_end'] = f"rgba({accent_rgb[0]}, {accent_rgb[1]}, {accent_rgb[2]}, 0.05)"

        return colors
    
    def darken_color(self, hex_color, factor=0.1):
        """Darken a hex color by a given factor"""
        hex_color = hex_color.lstrip('#')
        r, g, b = int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16)
        r = max(0, int(r * (1 - factor)))
        g = max(0, int(g * (1 - factor)))
        b = max(0, int(b * (1 - factor)))
        return f"#{r:02x}{g:02x}{b:02x}"
    
    def generate_content(self, site_name, chosen_theme, target_domain):
        """Generate all website content based on theme with real games"""
        self.log_debug(f"Generating content for {site_name}...")
        
        featured_games = self.fetch_slotslaunch_games(6)
        new_games = self.fetch_slotslaunch_games(5)
        
        self.log_debug(f"Content generation: {len(featured_games)} featured, {len(new_games)} new games")
        
        prompt = f"""You must respond with ONLY valid JSON. No explanations, no markdown, just JSON.

Generate SOCIAL CASINO website content for "{site_name}" based on this theme:
Name: {chosen_theme['name']}
Description: {chosen_theme['description']}
Mood: {', '.join(chosen_theme['mood'])}
Target Feel: {chosen_theme['target_feel']}

Return exactly this JSON structure:
{{
    "tagline": "Casino tagline with gaming terms",
    "hero_title": "Exciting casino headline with theme",
    "hero_description": "Engaging description about the casino gaming experience, about 30 words",
    "cta_text": "Play Now OR Spin Now OR similar gaming action",
    "sections": [
        {{
            "subtitle": "Description of the featured games available, about 20 words"
        }},
        {{
            "subtitle": "Description of the newest games and arrivals, about 20 words"
        }}
    ],
    "about_paragraphs": [
        "First paragraph about the casino experience and theme",
        "Second paragraph about games and entertainment", 
        "Third paragraph encouraging players to join and play"
    ],
    "disclaimer": "Social casino disclaimer about entertainment purposes only using SITE NAME not theme name"
}}"""
        
        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a JSON generator. Respond only with valid JSON, no explanations."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,
            max_tokens=1000,
            response_format={"type": "json_object"}
        )
        
        content = response.choices[0].message.content
        data = json.loads(content)

        data['sections'][0]['items'] = featured_games
        data['sections'][1]['items'] = new_games

        self.log_debug(f"Content generated successfully with games")
        return data
    
    def generate_legal_page_content(self, site_name, domain_name, page_type):
        """Generate a single legal page (terms, privacy, cookies, responsible) via API call"""
        page_prompts = {
            "terms": {
                "title": "Terms & Conditions",
                "subtitle": "Please read these terms carefully before using our services",
                "desc": "Full HTML-formatted terms content (1500-2000 words)..."
            },
            "privacy": {
                "title": "Privacy Policy",
                "subtitle": "Your privacy is important to us",
                "desc": "Full HTML-formatted privacy policy content (1500-2000 words)..."
            },
            "cookies": {
                "title": "Cookie Policy",
                "subtitle": "How we use cookies to improve your experience",
                "desc": "Full HTML-formatted cookie policy content (1000-1500 words)..."
            },
            "responsible": {
                "title": "Responsible Social Gaming",
                "subtitle": "Gaming should always be fun and responsible",
                "desc": "Full HTML-formatted responsible gaming content (1000-1500 words)..."
            }
        }
        meta = page_prompts[page_type]
        prompt = f"""Generate the {meta['title']} page for the social casino website "{site_name}" (domain: {domain_name}).

This is a SOCIAL CASINO website - no real money gambling involved, entertainment only.

Structure the content with HTML formatting:
- Use <h2> for main sections
- Use <h3> for subsections
- Use <p> for paragraphs
- Use <ul> and <li> for lists
- Use <strong> for emphasis

Return a JSON object with this structure:
{{
    "title": "{meta['title']}",
    "subtitle": "{meta['subtitle']}",
    "content": "{meta['desc']}"
}}

Make all content professional, legally sound, and comprehensive. Include all relevant sections for this policy type.

For social casino context:
- No real money gambling
- Entertainment purposes only
- No real prizes or cash-outs
- Virtual currency/credits only
- Age restriction (18+)
- Data protection compliance
"""
        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a legal content writer specializing in social casino terms and policies. Generate comprehensive legal content."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=8192,  # Increased to maximize output for large legal pages
            response_format={"type": "json_object"}
        )
        content = response.choices[0].message.content
        page_data = json.loads(content)
        # Replace escaped newlines with real newlines for HTML rendering
        if 'content' in page_data:
            page_data['content'] = page_data['content'].replace('\\n', '\n')
        self.log_debug(f"Generated {page_type} legal page")
        return {
            'page_title': page_data['title'],
            'page_subtitle': page_data['subtitle'],
            'page_type': page_type,
            'content': page_data['content'],
            'last_updated': datetime.now().strftime("%B %d, %Y")
        }

    def generate_all_legal_content(self, site_name, domain_name):
        """Generate all legal content with separate API calls for each page"""
        legal_pages = {}
        for page_type in ['terms', 'privacy', 'cookies', 'responsible']:
            legal_pages[page_type] = self.generate_legal_page_content(site_name, domain_name, page_type)
        self.log_debug(f"Generated all legal content with separate API calls")
        return legal_pages
    
    def select_theme_font(self, chosen_theme):
        """Select appropriate font based on theme using GPT"""
        prompt = f"""Select the perfect Google Font for this casino website theme:

Theme Name: {chosen_theme['name']}
Theme Description: {chosen_theme['description']}
Theme Mood: {', '.join(chosen_theme['mood'])}
Target Feel: {chosen_theme['target_feel']}

Based on this theme, choose ONE Google Font that best matches the theme's personality.
Consider the theme's mood and atmosphere when selecting.

Examples of Google Fonts to consider (but not limited to):
- Cinzel (elegant, classical)
- Oswald (bold, modern)
- Playfair Display (sophisticated, luxury)
- Rye (western, rustic)
- Cormorant Garamond (mystical, fantasy)
- Inter (clean, modern)
- Bebas Neue (bold, impactful)
- Abril Fatface (dramatic, bold)
- Righteous (futuristic, tech)
- Creepster (spooky, horror)
- Monoton (neon, retro)
- Bungee (bold, playful)
- Alfa Slab One (strong, powerful)
- Russo One (tech, space)

Return ONLY the font name exactly as it appears in Google Fonts, nothing else."""
        
        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a typography expert. Return only the font name, nothing else."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=50
        )
        
        font_name = response.choices[0].message.content.strip()
        self.log_debug(f"Selected font: {font_name}")
        return font_name
    
    def render_template(self, template_filename, data, output_filename):
        """Render a template with data and save to file"""
        self.log_debug(f"Rendering template: {template_filename}")
        
        # Load the template
        with open(template_filename, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        # Always inject uniqueness helpers
        context = dict(data)
        if hasattr(self, "unique_classes"):
            context["unique_classes"] = self.unique_classes
        if hasattr(self, "unique_ids"):
            context["unique_ids"] = self.unique_ids
        if hasattr(self, "get_element_tag"):
            context["get_element_tag"] = self.get_element_tag
        if hasattr(self, "random_inline_style"):
            context["random_inline_style"] = self.random_inline_style
        if hasattr(self, "unique_css_vars"):
            context["unique_css_vars"] = self.unique_css_vars
        if hasattr(self, "randomize_image_filename"):
            context["randomize_image_filename"] = self.randomize_image_filename
        if hasattr(self, "get_uniqueness_seed"):
            context["uniqueness_seed"] = self.get_uniqueness_seed()
        
        # Render the template with data first
        template = Template(template_content)
        html_output = template.render(**context)
        
        # Now inject CSS and JS into the rendered HTML
        # Find the closing </head> tag and insert CSS links before it
        css_includes = self._get_head_includes(output_filename)
        html_output = html_output.replace('</head>', f'{css_includes}\n</head>')
        
        # Find the closing </body> tag and insert JS scripts before it
        js_includes = self._get_body_scripts(output_filename)
        html_output = html_output.replace('</body>', f'{js_includes}\n</body>')
        
        output_path = self.output_dir / output_filename
        
        # Ensure the directory exists
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_output)
        
        self.log_debug(f"Template rendered successfully: {output_path}")
        return output_path

    def generate_about_sections(self, site_name, domain_name):
        """Generate structured About Us sections using GPT-4.1"""
        prompt = f"""You must respond with ONLY valid JSON. No explanations, no markdown, just JSON.

Generate an About Us page for a social casino website called "{site_name}" (domain: {domain_name}).
Use this structure (return a JSON array of sections, each with a "title" and "body"):

[
  {{
    "title": "Elevator Pitch / Who We Are",
    "body": "One-sentence identity and core promise: free-to-play fun, not real-money gambling."
  }},
  {{
    "title": "Mission & Values",
    "body": "Entertainment-first focus, social connection, fairness & transparency."
  }},
  {{
    "title": "How the Games Work",
    "body": "Clarify the social-casino model: free virtual coins as primary currency, optional in-app purchases, no real-money payouts."
  }},
  {{
    "title": "Fair Play & RNG Certification",
    "body": "Build trust in game integrity: RNG provider or certification body, regular audits, anti-cheat systems."
  }},
  {{
    "title": "Responsible Social Gaming",
    "body": "Show you care about player well-being: age limit, spending controls, links to support, entertainment-only reminder."
  }},
  {{
    "title": "Company Background",
    "body": "Founding story, location(s), key team or leadership blurbs."
  }}
]

Write each "body" in a friendly, up-tempo, trustworthy tone, 2-4 sentences per section, tailored to a social-casino audience. Do not include any HTML or markdown, just plain text.

Return ONLY a JSON array of objects with "title" and "body".
"""
        response = self.client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "You are a JSON generator. Respond only with valid JSON, no explanations."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=900,
            response_format={"type": "json_object"}
        )
        content = response.choices[0].message.content
        sections = json.loads(content)
        # If the response is a dict with a key, extract the array
        if isinstance(sections, dict) and "sections" in sections:
            sections = sections["sections"]
        return sections

    def generate_about_page(self, site_name, domain_name, base_data):
        """Render the About Us page using generated sections"""
        about_sections = self.generate_about_sections(site_name, domain_name)
        # Post-process: change "Elevator Pitch / Who We Are" to "Who We Are"
        for section in about_sections:
            if section.get("title", "").strip().lower() == "elevator pitch / who we are":
                section["title"] = "Who We Are"
        about_data = {
            **base_data,
            "about_sections": about_sections,
            "canonical_url": f"https://{domain_name}/pages/about"
        }
        return self.render_template(
            "about_template.html",
            about_data,
            "pages/about.html"
        )

    def generate_contact_page(self, site_name, domain_name, base_data):
        """Render the Contact Us page"""
        contact_data = {
            **base_data,
            "canonical_url": f"https://{domain_name}/pages/contact"
        }
        return self.render_template(
            "contact_template.html",
            contact_data,
            "pages/contact.html"
        )

    def _get_head_includes(self, filename):
        """Get CSS includes based on the page type"""
        # Determine the path prefix based on file location
        # Always use absolute paths for assets to ensure correct loading from any directory depth
        path_prefix = '/'
        
        includes = [f'    <link rel="stylesheet" href="/assets/css/base.css">']
        
        # Add page-specific CSS based on filename
        # Add homepage CSS for homepage files
        if (
            'homepage' in filename
            or filename == "index.html"
            or filename == "index.php"
        ):
            includes.append(f'    <link rel="stylesheet" href="{path_prefix}assets/css/homepage.css">')
        # Games listing page (games.html or games/index.php)
        elif filename == "games.html" or filename == "games/index.php":
            includes.append(f'    <link rel="stylesheet" href="{path_prefix}assets/css/games.css">')
        # Individual game pages (games/slug.html or games/slug/index.php)
        elif filename.startswith('games/'):
            # Only include game.css if not the games index page
            if filename != "games/index.php":
                includes.append(f'    <link rel="stylesheet" href="{path_prefix}assets/css/game.css">')
        elif any(page in filename for page in ['terms', 'privacy', 'cookies', 'responsible', 'about', 'contact']):
            includes.append(f'    <link rel="stylesheet" href="{path_prefix}assets/css/legal.css">')
        
        return '\n'.join(includes)

    def _get_body_scripts(self, filename):
        """Get JS includes based on the page type"""
        # Determine the path prefix based on file location
        if filename.startswith('pages/'):
            path_prefix = '../'
        elif filename.startswith('games/'):
            path_prefix = '../'
        else:
            path_prefix = ''
        
        scripts = [f'    <script src="/assets/js/base.js"></script>']
        
        # Add page-specific JS based on filename
        if 'homepage' in filename:
            scripts.append(f'    <script src="/assets/js/homepage.js"></script>')
        elif filename.startswith('games/'):
            scripts.append(f'    <script src="/assets/js/game.js"></script>')
        
        return '\n'.join(scripts)

    def generate_complete_website(self, domain_name, site_type="noip"):
        """Generate complete website with all pages"""
        print(f"üöÄ Starting complete website generation for: {domain_name}")
        print("=" * 60)
        print(f"Site type: {site_type}")

        # Helper functions for extension and folder logic
        def page_ext():
            return ".php" if site_type == "traffic_armor" else ".html"
        def page_folder(filename):
            # For traffic armor, return folder and index.php, else just filename.html
            if site_type == "traffic_armor":
                base = filename.replace(".html", "").replace(".php", "")
                return f"{base}/index.php"
            else:
                return f"{filename}.html"
        def page_link(filename, prefix=""):
            # For traffic armor, use trailing slash, else .html
            if site_type == "traffic_armor":
                base = filename.replace(".html", "").replace(".php", "")
                return f"{prefix}{base}/"
            else:
                return f"{prefix}{filename}.html"

        # Step 1: Extract site name and generate basic data
        site_name = domain_name.replace('.com', '').replace('.', ' ').title()
        print(f"üìù Site Name: {site_name}")
        
        # Step 2: Generate theme ideas
        print(f"üé® Generating theme ideas...")
        theme_ideas = self.generate_theme_ideas(domain_name)
        
        print(f"\nüé≠ Choose a theme for {site_name}:")
        print("-" * 30)
        for i, theme in enumerate(theme_ideas, 1):
            print(f"{i}. {theme['name']}")
            print(f"   {theme['description']}")
            print(f"   Mood: {', '.join(theme['mood'])}")
            print(f"   Feel: {theme['target_feel']}")
            print()
        
        while True:
            try:
                choice = int(input("Enter your choice (1-3): ")) - 1
                if 0 <= choice < len(theme_ideas):
                    chosen_theme = theme_ideas[choice]
                    break
                else:
                    print("‚ùå Invalid choice. Please enter 1, 2, or 3.")
            except ValueError:
                print("‚ùå Please enter a valid number.")
        
        print(f"‚úÖ Selected theme: {chosen_theme['name']}")
        
        # Step 3: Generate complete color palette
        print(f"üé® Generating complete color palette...")
        colors = self.generate_color_palette(chosen_theme)
        print(f"‚úÖ Colors generated: Primary {colors['primary']}, Secondary {colors['secondary']}")
        
        print(f"üî§ Selecting theme-appropriate font...")
        selected_font = self.select_theme_font(chosen_theme)
        print(f"‚úÖ Font selected: {selected_font}")
        
        # Step 4: Generate CSS and JS files
        print(f"üé® Generating CSS and JavaScript files...")
        self.generate_base_css(colors, selected_font)
        self.generate_base_js()
        self.generate_homepage_css()
        self.generate_games_css()
        self.generate_game_css()
        self.generate_legal_css()
        self.generate_homepage_js()
        self.generate_game_js()
        print(f"‚úÖ All CSS and JS files generated")
        
        # Step 5: Generate hero image using DALL-E
        print(f"üñºÔ∏è Generating hero background image with DALL-E...")
        hero_image = self.generate_hero_image(chosen_theme, site_name, colors)
        print(f"‚úÖ Hero image generated: {hero_image}")

        # Step 5.1: Generate favicon using DALL-E
        print(f"üîñ Generating favicon with DALL-E...")
        favicon_filename = self.generate_favicon(chosen_theme, site_name, colors)
        print(f"‚úÖ Favicon generated: {favicon_filename}")
        
        # Step 6: Generate content (includes fetching real games)
        print(f"‚úçÔ∏è  Generating website content and fetching games...")
        content = self.generate_content(site_name, chosen_theme, domain_name)
        print(f"‚úÖ Content generated: {content['hero_title']}")
        
        # Step 7: Generate all legal content in one optimized call
        print(f"üìÑ Generating all legal content...")
        legal_pages_data = self.generate_all_legal_content(site_name, domain_name)
        print(f"‚úÖ All legal content generated in one call")
        
        # Step 8: Prepare common template data
        base_data = {
            'site_name': site_name,
            'primary_font': selected_font,
            'colors': colors,  # Now includes all required colors
            'favicon': favicon_filename,
            # Universal URLs for sidebar/footer (work for both site types)
            'about_url': page_link("about", "/pages/"),
            'contact_url': page_link("contact", "/pages/"),
            'terms_url': page_link("terms", "/pages/"),
            'privacy_url': page_link("privacy", "/pages/"),
            'cookies_url': page_link("cookies", "/pages/"),
            'responsible_url': page_link("responsible", "/pages/"),
            'footer': {
                'disclaimer': {
                    'title': 'Disclaimer (18+ / Play Responsibly)',
                    'text': (
                        "This free‚Äëto‚Äëplay social‚Äëcasino site is intended for persons aged 18‚ÄØyears and older (or the legal gambling age in your jurisdiction).\n"
                        "‚Ä¢‚ÄØNo real‚Äëmoney gambling: all games use virtual currency only and do not offer prizes of real‚Äëworld value.\n"
                        "‚Ä¢‚ÄØOptional in‚Äëapp purchases of virtual coins may be available.\n"
                        "‚Ä¢‚ÄØSuccess at social‚Äëcasino games does not imply future success at real‚Äëmoney gambling.\n"
                        "If you or someone you know has a gambling problem, please seek help at www.begambleaware.org or call 1‚Äë800‚Äë522‚Äë4700."
                    )
                },
                'copyright_year': datetime.now().year,
                'domain_name': domain_name
            }
        }
        
        # Step 9: Generate Homepage
        print(f"üè† Generating homepage...")
        homepage_data = {
            **base_data,
            'site_tagline': content['tagline'],
            'hero': {
                'title': content['hero_title'],
                'description': content['hero_description'],
                'background_image': hero_image,
                'overlay_opacity': 0.6,
                'cta_text': content['cta_text'],
                'cta_url': '/games',
                'cta_icon': 'fas fa-dice'
            },
            'content_sections': content['sections'],
            'about': {
                'content': content['about_paragraphs']
            },
            'favicon_path': '/favicon.png'
        }
        # Add canonical URL for homepage
        homepage_data['canonical_url'] = f"https://{domain_name}/"

        # Determine homepage and games page filenames
        if site_type == "traffic_armor":
            homepage_filename = "index.php"
            games_filename = "games/index.php"
        else:
            homepage_filename = "index.html"
            games_filename = "games.html"

        homepage_path = self.render_template(
            'homepage_template.html',
            homepage_data,
            homepage_filename
        )
        
        # Step 10: Generate Games Page
        print(f"üéÆ Generating games page...")
        all_games = content['sections'][0]['items'] + content['sections'][1]['items']
        
        games_data = {
            **base_data,
            'all_games': all_games,
            'total_games': len(all_games),
            'canonical_url': f"https://{domain_name}/games",
            'path_prefix': '../' if site_type == "traffic_armor" else '',
            'favicon_path': '../favicon.png' if site_type == "traffic_armor" else 'favicon.png'
        }
        games_page_path = self.render_template(
            'games_template.html',
            games_data,
            games_filename
        )
        
        # Step 11: Generate Legal Pages
        print(f"üìÑ Rendering legal pages...")
        legal_paths = []
        
        for page_type in ['terms', 'privacy', 'cookies', 'responsible']:
            legal_data = {
                **base_data,
                **legal_pages_data[page_type]
            }
            # Canonical URL for legal pages
            if site_type == "traffic_armor":
                canonical_url = f"https://{domain_name}/pages/{page_type}/"
            else:
                canonical_url = f"https://{domain_name}/pages/{page_type}.html"
            legal_data['canonical_url'] = canonical_url
        
            # Determine output filename based on site_type
            if site_type == "traffic_armor":
                legal_filename = f"pages/{page_type}/index.php"
            else:
                legal_filename = f"pages/{page_type}.html"
        
            # Add favicon_path for legal pages
            if site_type == "traffic_armor":
                legal_data['favicon_path'] = "../../favicon.png"
            else:
                legal_data['favicon_path'] = "favicon.png"
            
            legal_path = self.render_template(
                'legal_template.html',
                legal_data,
                legal_filename
            )
            legal_paths.append(legal_path)
        
        # Step 12: Generate Individual Game Pages
        print(f"üïπÔ∏è  Generating individual game pages...")
        game_paths = []
        
        for i, game in enumerate(all_games):
            print(f"  üé∞ Generating page for: {game['title']}")
            
            # Get similar games (exclude current game)
            similar_games = [g for g in all_games if g['slug'] != game['slug']][:4]
            
            game_data = {
                **base_data,
                'game': game,
                'similar_games': similar_games,
                'canonical_url': f"https://{domain_name}/games/{game['slug']}",
                'favicon_path': '../favicon.png' if site_type == "traffic_armor" else 'favicon.png'
            }
            if site_type == "traffic_armor":
                game_filename = f"games/{game['slug']}/index.php"
            else:
                game_filename = f"games/{game['slug']}.html"
            game_path = self.render_template(
                'game_template.html',
                game_data,
                game_filename
            )
            game_paths.append(game_path)
        
        # Step 12.1: Generate About Us and Contact Us Pages
        print(f"üë• Generating About Us page...")
        if site_type == "traffic_armor":
            about_filename = "pages/about/index.php"
        else:
            about_filename = "pages/about.html"
        about_path = self.render_template(
            "about_template.html",
            {
                **base_data,
                "about_sections": self.generate_about_sections(site_name, domain_name),
                "canonical_url": f"https://{domain_name}/about",
                "favicon_path": "../../favicon.png" if site_type == "traffic_armor" else "favicon.png"
            },
            about_filename
        )
        print(f"‚úÖ About Us page generated: {about_path}")

        print(f"‚úâÔ∏è  Generating Contact Us page...")
        if site_type == "traffic_armor":
            contact_filename = "pages/contact/index.php"
        else:
            contact_filename = "pages/contact.html"
        contact_path = self.render_template(
            "contact_template.html",
            {
                **base_data,
                "canonical_url": f"https://{domain_name}/contact",
                "favicon_path": "../../favicon.png" if site_type == "traffic_armor" else "favicon.png"
            },
            contact_filename
        )
        print(f"‚úÖ Contact Us page generated: {contact_path}")

        # Step 13: Generate Summary
        print("\n" + "=" * 60)
        print("üéâ COMPLETE WEBSITE GENERATED SUCCESSFULLY!")
        print("=" * 60)
        print(f"üè† Homepage: {homepage_path}")
        print(f"üéÆ Games Page: {games_page_path}")
        print(f"üìÑ Legal Pages: {len(legal_paths)} pages generated")
        print(f"üïπÔ∏è  Game Pages: {len(game_paths)} individual game pages")
        print(f"üë• About Us Page: {about_path}")
        print(f"‚úâÔ∏è  Contact Us Page: {contact_path}")
        print(f"üé® CSS Files: {len(list(self.css_dir.glob('*.css')))} files")
        print(f"üìú JS Files: {len(list(self.js_dir.glob('*.js')))} files")
        print(f"üñºÔ∏è  Images Directory: {self.images_dir}")
        print(f"üìÅ Total Files Generated: {4 + len(legal_paths) + len(game_paths) + 8}")  # +8 for CSS/JS files, +2 for about/contact
        print(f"üé® Theme: {chosen_theme['name']}")
        print(f"üé® Primary Color: {colors['primary']}")
        print(f"üî§ Font: {selected_font}")
        print(f"üéÆ Total Games: {len(all_games)}")
        print(f"üñºÔ∏è  Hero Image: {hero_image} (Generated by DALL-E)")
        print("=" * 60)
        
        # Step 14: Generate sitemap.xml
        print(f"üó∫Ô∏è  Generating sitemap.xml ...")
        all_urls = []
        # Homepage
        all_urls.append(f"https://{domain_name}/")
        # Games page
        all_urls.append(f"https://{domain_name}/games")
        # Legal pages
        for page_type in ['terms', 'privacy', 'cookies', 'responsible']:
            if site_type == "traffic_armor":
                all_urls.append(f"https://{domain_name}/pages/{page_type}/")
            else:
                all_urls.append(f"https://{domain_name}/pages/{page_type}.html")
        # About and Contact
        all_urls.append(f"https://{domain_name}/pages/about")
        all_urls.append(f"https://{domain_name}/pages/contact")
        # Individual game pages
        for game in all_games:
            all_urls.append(f"https://{domain_name}/games/{game['slug']}")
        sitemap_path = self.generate_sitemap(all_urls)
        print(f"‚úÖ Sitemap generated: {sitemap_path}")

        return {
            'homepage': homepage_path,
            'games_page': games_page_path,
            'legal_pages': legal_paths,
            'game_pages': game_paths,
            'about_page': about_path,
            'contact_page': contact_path,
            'css_files': list(self.css_dir.glob('*.css')),
            'js_files': list(self.js_dir.glob('*.js')),
            'total_files': 4 + len(legal_paths) + len(game_paths) + 8,
            'theme': chosen_theme,
            'colors': colors,
            'font': selected_font,
            'hero_image': hero_image,
            'site_type': site_type,
            'sitemap': sitemap_path
        }

    def generate_sitemap(self, urls, output_path=None):
        """Generate a sitemap.xml file with all provided URLs"""
        self.log_debug(f"Generating sitemap.xml with {len(urls)} URLs...")
        sitemap_xml = '<?xml version="1.0" encoding="UTF-8"?>\n'
        sitemap_xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n'
        for url in urls:
            sitemap_xml += f"  <url>\n    <loc>{url}</loc>\n  </url>\n"
        sitemap_xml += '</urlset>\n'

        if output_path is None:
            output_path = self.output_dir / "sitemap.xml"
        else:
            output_path = Path(output_path)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(sitemap_xml)
        self.log_debug(f"Sitemap generated: {output_path}")
        return output_path

def main():
    """Main function to run the complete website generator"""
    print("üåü Complete Dynamic Casino Website Generator")
    print("=" * 60)
    
    # Load environment variables
    load_dotenv()
    
    # Get API key from environment
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå Error: OPENAI_API_KEY not found!")
        print("üìù Please create a .env file with your OpenAI API key:")
        print("   OPENAI_API_KEY=sk-your-api-key-here")
        print("\nüîë You can get your API key from: https://platform.openai.com/api-keys")
        return
    
    # Get domain from user
    print("üåê Enter the domain name for your website:")
    domain = input("Domain (e.g., 'example.com'): ").strip()
    
    if not domain:
        print("‚ùå Domain name is required!")
        return

    # Prompt for site type
    print("\nSelect site type:")
    print("1) noip (default)")
    print("2) traffic armor")
    site_type = input("Enter 1 or 2: ").strip()
    if site_type == "2":
        site_type = "traffic_armor"
    else:
        site_type = "noip"
    
    try:
        # Initialize generator with dynamic whitelisted domain
        generator = UniqueWebsiteGenerator(api_key, default_domain=domain)
        
        # Generate complete website with site_type
        result = generator.generate_complete_website(domain, site_type=site_type)
        
        if result:
            print(f"\nüéØ Next steps:")
            print(f"1. Open the homepage file in your browser: {result['homepage']}")
            print(f"2. All pages are generated and ready to use")
            print(f"3. CSS and JS files are in the assets folder")
            print(f"4. Legal pages are in the 'pages' folder")
            print(f"5. Individual game pages are in the 'games' folder")
            print(f"6. All images are saved locally and linked properly")
            print(f"7. Upload all files to your web server")
            print(f"8. Update any SlotsLaunch API integration as needed")
            print("\n‚ú® Your complete casino website is ready!")
        
    except openai.AuthenticationError:
        print("‚ùå Invalid API key. Please check your OPENAI_API_KEY in .env file")
    except openai.RateLimitError:
        print("‚ùå API rate limit exceeded. Please try again later")
    except openai.APIError as e:
        print(f"‚ùå OpenAI API error: {e}")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()
